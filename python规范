## pycharm设置tab为四个空格,python间距设为四个空格。
## Python文件中必须使用UTF-8编码 `# -*- coding: utf-8 -*- `Python文件中应该使用UTF-8编码(Python2.x中默认使用ASCII编码), 使用ASCII或UTF-8的文件必须有编码声
明. 另外使用\x转义字符是在字符串中包含非ASCII(non-ASCII)数据的首选方法.
## 一行只写一条语句
## 一行长度小于XX个字符，与Python标准库看齐
较长的语句、表达式或参数（>xx字符）要分成多行书写，首选使用括号（包括{},[],()）内的行延续，推荐使用反斜
杠（\）进行断行。长表达式要在低优先级操作符处划分新行，操作符统一放在新行行首或原行行尾，划分出的新
行要进行适当的缩进，使排版整齐，语句可读。
https://blog.csdn.net/weixin_42122355/article/details/83373889
## 在两个以上的关键字、变量、常量进行对等操作时，它们之间的操作符前后要加空格
1、逗号、分号（假如用到的话）只在后面加空格。
2、比较操作符">"、">="、"<"、"=<"、"==", 赋值操作符"="、"+="，算术操作符"+"、"-"、"%"，逻辑操作符and,or等双目操作符的前后加空格。
## 进行非对等操作时，如果是关系密切的立即操作符（如.），后不应加空格
1. 函数定义语句中的参数默认值，调用函数传递参数时使用的等号，建议不加空格
2. "*"、"**"等作为操作符时，前后不加空格。
3. "."前后不加空格。
4. 括号内侧，左括号后面和右括号前面，不需要加空格，多重括号间不必加空格。
5. 紧贴索引切片或被调用函数名，开始的括号前，不需要加空格。
## 加载模块必须分开每个模块占一行
## 导入部分(imports)置于模块注释和文档字符串之后，模块全局变量和常量声明之前
导入部分(imports)置于模块注释和文档字符串之后，模块全局变量和常量声明之前。导入(import)库时，按照标准库、第三方关联库、本地特定的库/程序顺序导入，并在这几组导入语句之间增加一个空行
。
## 避免使用from xxx import *的方式导入某模块的所有成员
from xxx import *会将其他模块中的所有成员挨个赋值给当前范围的同名变量，如果当前范围已经有同名变量，则会静默将其覆盖。这种方式容易导致名字冲突，且冲突后不容易定位，应当尽量避免使用。
## 类Unix操作系统上直接执行的Python文件头部建议使用#!/usr/bin/env python指定解释器
类Unix操作系统上使用Hashbang “#!/usr/bin/env python”声明的时候，会去取系统的 PATH 变量中指定的
第一个 Python 来执行你的脚本，有助于正确指定执行Python文件的解释器。Hashbang的位置需要放在文件编码
声明之前。 Windows操作系统可忽略此建议。
## 公共属性的注释写在属性声明的上方，与声明保持同样的
缩进。行内注释应以#和一个空格作为开始，与后面的文字注释以
一个空格隔开
## 包（Package）、模块（Module）名使用意义完整的英文描述，采用小写加下划线（lower_with_under）的风格命名
## 类（Class）名使用意义完整的英文描述，采用大写字母开头的单词（CapWords）风格命名
## 函数（Function）、方法（Method）、函数参数（Function Parameters）名使用意义完整的英文描述，采用小写加下划线（lower_with_under）的风格命名
## 变量（variable）采用小写加下划线（lower_with_under）的风格命名。常量（constant）采用大写加下划线（CAPS_WITH_UNDER）的风格命名
## 类或对象的私有成员一般用单下划线_开头；对于需要被继承的基类成员，如果想要防止与派生类成员重名，可用双下划线__开头。
https://docs.python.org/3/tutorial/classes.html#private-variables
## 变量（variable）命名要有明确含义，使用完整的单词或大家基本可以理解的缩写，避免使人产生误解
> 
命名规范推荐表
Type Public Internal
Modules lower_with_under _lower_with_under
Packages lower_with_under
Classes CapWords
Exceptions CapWords
Functions lower_with_under() _lower_with_under()
Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER
Global/Class Variables lower_with_under lower_with_under
Instance Variables lower_with_under
lower_with_under (protected) or
__lower_with_under (private)
Method Names lower_with_under()
_lower_with_under() (protected) or
__lower_with_under() (private)
Function/Method
Parameters
lower_with_under
Local Variables lower_with_under

## 与None作比较要使用“is”或“is not”，不要使用等号
## 定义一个all不会把本模块的所有内容都暴露在外部，将允许外部访问的变量、函数和类的名字放进去
## 避免直接使用dict[key]的方式从字典中获取value，如果一定要使用，需要注意当key not in dict时的异常捕获和处理
## 对序列使用切片操作时，不建议使用负步进值进行切片
## 传递实例类型参数后，函数内应使用isinstance函数进行参数检查，不要使用type
## 尽量使用推导式代替重复的逻辑操作构造序列。但推导式必须考虑可读性，不推荐使用两个以上表达式的列表推导
## 功能代码应该封装在函数或类中
## 需要精确数值计算的场景，应使用decimal模块
## 避免对不同对象使用同一个变量名
## 当多个Python源码文件分不同子目录存放时，用包
（package）形式管理各个目录下的模块。
## 避免在代码中修改sys.path列表
##尽量不使用for i in range(x)的方式循环处理集合数
据，而应使用for x in iterable的方式
enumerate
## 避免在无关的变量或无关的概念之间重用名字，避免因
重名而导致的意外赋值和错误引用
Python的函数/类定义和C语言不同，函数/类定义语句实际上是给一个名字赋值。因此重复定义一个函数/
类的名字不会导致错误，后定义的会覆盖前面的。但是重复定义很容易掩盖编码问题，让同一个名字的函数/类在
不同的执行阶段具有不同的含义，不利于可读性，应予以禁止。 Python在解析一个被引用的名字时遵循LEGB顺序
（Local - Enclosed - Global - Builtin），从内层一直查找到外层。内层定义的变量会覆盖外层的同名变量。在代码
修改时，同名的变量容易导致错误的引用，也不利于代码可读性，应当尽量避免。

## 使用try…except…结构对代码作保护时，需要在异常后
使用finally…结构保证操作对象的释放
## 不要使用“except:”语句来捕获所有异常
## 不在except分支里面的raise都必须带异常
## 尽量用异常来表示特殊情况，而不要返回None
## 避免finally中可能发生的陷阱，不要在finally中使用
return或者break语句
## 禁止使用except X, x语法，应当使用except X as x
说明： except X, x语法只在2.X版本支持，3.X版本不支持，有兼容性问题。而且，except X, x写法容易和多异常捕
获的元组（tuple）表达式混淆。因此应该统一用except X as x方式。
## 方法发生异常时要恢复到之前的对象状态

## assert语句通常只在测试代码中使用，禁止在生产版本
中包含assert功能

## 多线程适用于阻塞式IO场景，不适用于并行计算场景
Python的标准实现是CPython。
CPython执行Python代码分为2个步骤：首先，将文本源码解释编译为字节码，然后再用一个解释器去解释运行字
节码。字节码解释器是有状态的，需要维护该状态的一致性，因此使用了GIL（Global Interpreter Lock，全局解
释器锁）。
GIL的存在，使得CPython在执行多线程代码的时候，同一时刻只有一个线程在运行，无法利用多CPU提高运算效
率。但是这个特点也带来了一个好处：CPython运行多线程的时候，内部对象缺省就是线程安全的。这个特性，被
非常多的Python库开发者所依赖，直到CPython的开发者想要去除GIL的时候，发现已经有大量的代码库重度依赖
这个GIL带来的内部对象缺省就是线程安全的特性，变成一个无法解决的问题了。
虽然多线程在并行计算场景下无法带来好处，但是在阻塞式IO场景下，却仍然可以起到提高效率的作用。这是因为
阻塞式IO场景下，线程在执行IO操作时并不需要占用CPU时间，此时阻塞IO的线程可以被挂起的同时继续执行IO操
作，而让出CPU时间给其他线程执行非IO操作。这样一来，多线程并行IO操作就可以起到提高运行效率的作用了。
综上，Python的标准实现CPython，由于GIL的存在，同一个时刻只能运行一个线程，无法充分利用多CPU提升运
算效率，因此Python的多线程适用于阻塞式IO的场景，不适用于并行计算的场景。
## 建议使用Queue来协调各线程之间的工作
## 建议使用协程来处理并发场景

## 在list成员个数可以预知的情况下，创建list时需预留空间正好容纳所有成员的空间
## 在成员个数及内容皆不变的场景下尽量使用tuple替代list
## 对于频繁使用的外界对象，尽量使用局部变量来引用之
## Python2.x中使用xrange代替range
## 尽量使用generator comprehension代替list comprehension
## 使用format方法、"%"操作符和join方法代替"+"和"+="操作符来完成字符串格式化

## 函数参数中的可变参数不要使用默认值，在定义时使用None
## 对子类继承的变量要做显式定义和赋初值
## 严禁使用注释行等形式仅使功能失效
## 慎用copy和 deepcopy
说明：在python中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，python
并没有拷贝这个对象，而只是拷贝了这个对象的引用。如果需要拷贝对象，需要使用标准库中的copy模块。copy
模块提供copy和deepcopy两个方法：
copy浅拷贝：拷贝一个对象，但是对象的属性还是引用原来的。对于可变类型，比如列表和字典，只是复制
其引用。基于引用所作的改变会影响到被引用对象。
deepcopy深拷贝：创建一个新的容器对象，包含原有对象元素（引用）全新拷贝的引用。外围和内部元素都
拷贝对象本身，而不是引用。
Notes：对于数字，字符串和其他原子类型对象等，没有被拷贝的说法。如果对其重新赋值，也只是新创建一个对
象，替换掉旧的而已。使用copy和deepcopy时，需要了解其使用场景，避免错误使用。
## 使用os.path库中的方法代替字符串拼接来完成文件系统路径的操作
## 使用subprocess模块代替os.system模块来执行shell命令
## 建议使用with语句操作文件
说明：Python 对一些内建对象进行改进，加入了对上下文管理器的支持，可以用于 with 语句中。使用 with 语句
可以自动关闭文件，减少文件读取操作错误的可能性，在代码量和健壮性上更优。注意 with 语句要求其操作的类
型实现"__enter__()"和"__exit__()"方法，需确认实现后再使用。

