# -*- coding: utf-8 -*-
# @Author   : dWX753787
# @Date     : 2019/8/29
from flask import Blueprint, render_template, request, redirect, url_for, jsonify

from utils.create_db import CreateDB
from utils.data_json import DataJson
from app.models import ProductCfgspartBycfgid, ProductCfgparamBycfgid, ProductCfgidsByspartvarname, ProductCfgidsByparam
from app.models import db


# 初始化蓝图对象，蓝图用于模块化管理路由
from utils.database import ControlDB

blue = Blueprint('app', __name__)


# 首页
@blue.route('/index/', methods=['GET', 'POST'])
def index():
    if request.method == 'GET':
        return render_template('index.html')


# 接口一 # 1.1	根据参数查询产品配置模型ID
@blue.route('/product_cfgids_byparam/', methods=['GET', 'POST'])
def product_cfgids_byparam():
    if request.method == 'GET':
        data_dict = {
        }
        return render_template('product_cfgids_byparam.html', data_dict=data_dict)
    if request.method == 'POST':
        n = 0
        result_dict = request.form
        while 1:
            n += 1
            r1_json = DataJson(params=result_dict,
                               url='',
                               page_index=n).get_json()
            for item in r1_json:
                product = ProductCfgidsByparam()
                for key, value in item.items():
                    product.add_item(key, value)
                product.add_update()
            if len(r1_json) < 1000:
                break
        return jsonify({'code': 200, 'msg': '请求成功'})


# 接口二 # 1.2	根据Spart_Varname查询产品配置模型ID
@blue.route('/product_cfgids_byspartvarname/', methods=['GET', 'POST'])
def product_cfgids_byspartvarname():
    if request.method == 'GET':
        data_dict = {
        }
        return render_template('product_cfgids_byspartvarname.html', data_dict=data_dict)
    if request.method == 'POST':
        n = 0
        result_dict = request.form
        while 1:
            n += 1
            r2_json = DataJson(params=result_dict,
                               url='',
                               page_index=n).get_json()
            for item in r2_json:
                exist_productcfgid_list = [product_item.productcfgid for product_item in ProductCfgidsByspartvarname.query.all()]
                exist_productcfgid_list = list(set(exist_productcfgid_list))
                product = ProductCfgidsByspartvarname()
                productcfgid = item.get('productcfgid')
                if productcfgid and productcfgid not in exist_productcfgid_list:
                    for key, value in item.items():
                            product.add_item(key, value)
                    product.add_update()
                    # 自动添加到product_cfgparam_bycfgid
                    product_cfgparam_bycfgid_n = 0
                    data_dict3 = {"PRODUCTCFGID": f"[\"{productcfgid}\"]"}
                    while 1:
                        product_cfgparam_bycfgid_n += 1
                        r3_json = DataJson(params=data_dict3,
                                           url='',
                                           page_index=product_cfgparam_bycfgid_n).get_json()
                        for item3 in r3_json:
                            product = ProductCfgparamBycfgid()
                            for key, value in item3.items():
                                product.add_item(key, value)
                            product.add_update()
                        print(f'内层product_cfgparam_bycfgid:{product_cfgparam_bycfgid_n}, 数量:{len(r3_json)}')
                        if len(r3_json) < 1000:
                            break
                    # 自动添加到product_cfgspart_bycfgid
                    product_cfgspart_bycfgid_n = 0
                    data_dict4 = {"PRODUCTCFGID": f"[\"{productcfgid}\"]"}
                    while 1:
                        product_cfgspart_bycfgid_n += 1
                        r4_json = DataJson(params=data_dict4,
                                           url='',
                                           page_index=product_cfgspart_bycfgid_n).get_json()
                        for item4 in r4_json:
                            product = ProductCfgspartBycfgid()
                            for key, value in item4.items():
                                product.add_item(key, value)
                            product.add_update()
                        print(f'内层product_cfgspart_bycfgid:{product_cfgspart_bycfgid_n}, 数量:{len(r4_json)}')
                        if len(r4_json) < 1000:
                            break
            print(f'外层:{n}, 数量:{len(r2_json)}')
            if len(r2_json) < 1000:
                break
        # return jsonify({'code': 200, 'msg': '请求成功'})
        # return render_template('auto_get.html')
        return redirect(url_for('app.index'))


# 接口四 # 1.4	产品配置模型下的Spart明细查询服务
@blue.route('/product_cfgspart_bycfgid/', methods=['GET', 'POST'])
def product_cfgspart_bycfgid():
    if request.method == 'GET':
        data_dict = {"PRODUCTCFGID": "[\"4qu7c$1dir$$\"]"}
        return render_template('product_cfgspart_bycfgid.html', data_dict=data_dict)
    if request.method == 'POST':
        n = 0
        result_dict = request.form
        while 1:
            n += 1
            r4_json = DataJson(params=result_dict,
                               url='',
                               page_index=n).get_json()
            for item in r4_json:
                product = ProductCfgspartBycfgid()
                for key, value in item.items():
                    product.add_item(key, value)
                product.add_update()
            if len(r4_json) < 1000:
                break
        return jsonify({'code': 200, 'msg': '请求成功'})


# 建库
@blue.route('/create_database/', methods=['GET'])
def create_database():
    if request.method == 'GET':
        database = 'data_deal'
        warning_message = ''
        cdb = ControlDB(database)
        conn, cur = cdb.get_connect()
        if conn is None or cur is None:
            try:
                base_cdb = ControlDB('mysql')
                base_conn, base_cur = base_cdb.get_connect()

                # 初次创建数据库
                curr_cdb = CreateDB(base_conn, base_cur, database)
                curr_cdb.create_database()

                base_cur.close()
                base_conn.close()
            except Exception as e:
                warning_message = '创建Mysql数据库失败，请查看数据库安装是否正确！'
        return jsonify({'code': 200, 'msg': '请求成功', 'error': warning_message, 'url': request.host_url})


# 删除数据库
@blue.route('/drop_database/', methods=['GET'])
def drop_database():
    if request.method == 'GET':
        database = 'data_deal'
        base_cdb = ControlDB('mysql')
        base_conn, base_cur = base_cdb.get_connect()
        curr_cdb = CreateDB(base_conn, base_cur, database)
        curr_cdb.drop_database()
        return jsonify({'code': 200, 'msg': '请求成功'})


# 建表
@blue.route('/create_table/', methods=['GET'])
def create_table():
    if request.method == 'GET':
        db.create_all()
        return jsonify({'code': 200, 'msg': '请求成功'})


# 清空表数据
@blue.route('/truncate_table/', methods=['GET'])
def truncate_table():
    if request.method == 'GET':
        db.drop_all()
        return jsonify({'code': 200, 'msg': '请求成功'})


# 自动获取界面(前端)
@blue.route('/auto_get/', methods=['GET'])
def auto_get():
    return render_template('auto_get.html')

